{"ast":null,"code":"/* eslint-disable */\nimport writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\nvar useCopyToClipboard = function () {\n  var isMounted = useMountedState();\n  var _a = useSetState({\n      value: undefined,\n      error: undefined,\n      noUserInteraction: true\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var copyToClipboard = useCallback(function (value) {\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        if (typeof value !== 'string') {\n          console.error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        }\n      }\n      var noUserInteraction = writeText(value);\n      if (!isMounted()) {\n        return;\n      }\n      setState({\n        value: value,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      if (!isMounted()) {\n        return;\n      }\n      setState({\n        value: undefined,\n        error: error,\n        noUserInteraction: true\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\nexport default useCopyToClipboard;","map":{"version":3,"names":["writeText","useCallback","useMountedState","useSetState","useCopyToClipboard","isMounted","_a","value","undefined","error","noUserInteraction","state","setState","copyToClipboard","process","env","NODE_ENV","console"],"sources":["/Users/gabrielokoye/repo/instagram-react-app/node_modules/react-use/esm/useCopyToClipboard.js"],"sourcesContent":["/* eslint-disable */\nimport writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\nvar useCopyToClipboard = function () {\n    var isMounted = useMountedState();\n    var _a = useSetState({\n        value: undefined,\n        error: undefined,\n        noUserInteraction: true,\n    }), state = _a[0], setState = _a[1];\n    var copyToClipboard = useCallback(function (value) {\n        try {\n            if (process.env.NODE_ENV === 'development') {\n                if (typeof value !== 'string') {\n                    console.error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n                }\n            }\n            var noUserInteraction = writeText(value);\n            if (!isMounted()) {\n                return;\n            }\n            setState({\n                value: value,\n                error: undefined,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n        catch (error) {\n            if (!isMounted()) {\n                return;\n            }\n            setState({\n                value: undefined,\n                error: error,\n                noUserInteraction: true,\n            });\n        }\n    }, []);\n    return [state, copyToClipboard];\n};\nexport default useCopyToClipboard;\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,mBAAmB;AACzC,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,WAAW,MAAM,eAAe;AACvC,IAAIC,kBAAkB,GAAG,YAAY;EACjC,IAAIC,SAAS,GAAGH,eAAe,EAAE;EACjC,IAAII,EAAE,GAAGH,WAAW,CAAC;MACjBI,KAAK,EAAEC,SAAS;MAChBC,KAAK,EAAED,SAAS;MAChBE,iBAAiB,EAAE;IACvB,CAAC,CAAC;IAAEC,KAAK,GAAGL,EAAE,CAAC,CAAC,CAAC;IAAEM,QAAQ,GAAGN,EAAE,CAAC,CAAC,CAAC;EACnC,IAAIO,eAAe,GAAGZ,WAAW,CAAC,UAAUM,KAAK,EAAE;IAC/C,IAAI;MACA,IAAIO,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QACxC,IAAI,OAAOT,KAAK,KAAK,QAAQ,EAAE;UAC3BU,OAAO,CAACR,KAAK,CAAC,qBAAqB,GAAG,OAAOF,KAAK,GAAG,iCAAiC,CAAC;QAC3F;MACJ;MACA,IAAIG,iBAAiB,GAAGV,SAAS,CAACO,KAAK,CAAC;MACxC,IAAI,CAACF,SAAS,EAAE,EAAE;QACd;MACJ;MACAO,QAAQ,CAAC;QACLL,KAAK,EAAEA,KAAK;QACZE,KAAK,EAAED,SAAS;QAChBE,iBAAiB,EAAEA;MACvB,CAAC,CAAC;IACN,CAAC,CACD,OAAOD,KAAK,EAAE;MACV,IAAI,CAACJ,SAAS,EAAE,EAAE;QACd;MACJ;MACAO,QAAQ,CAAC;QACLL,KAAK,EAAEC,SAAS;QAChBC,KAAK,EAAEA,KAAK;QACZC,iBAAiB,EAAE;MACvB,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACC,KAAK,EAAEE,eAAe,CAAC;AACnC,CAAC;AACD,eAAeT,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}